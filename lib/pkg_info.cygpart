################################################################################
#
# pkg_info.cygpart - cygport package information functions
#
# Copyright (C) 2006, 2007, 2008, 2009, 2010 Yaakov Selkowitz
# Provided by the Cygwin Ports project <http://sourceware.org/cygwinports/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$
#
################################################################################

__show_info() {
	cat <<-_EOF
	Cygport package information
	    Package name:     ${PN}
	    Package version:  ${PV}
	    Cygwin release:   ${PR}
	    Homepage:         ${HOMEPAGE}
	    Description:      ${DESCRIPTION}
		_EOF
}

__list_files() {
	pushd ${D}
	find . ! -type d | sed 's!^\.!  !' | sort
	popd
}

__list_deps() {
	local d
	local nativelibs netlibs netimps
	local os_path="${PATH}"

	pushd ${D}

#****v* Information/DEPS_PATH
#  DESCRIPTION
#  A colon-separated list of directories not ordinarily in PATH in which to
#  search for linked dependencies.  Given directories are searched both
#  on the system and under $D.
#****

	# This prevents a package from listing itself as a dependency if
	# already installed
	unset PATH

	for d in ${DEPS_PATH//:/ }
	do
		PATH+="${D}${d}:${d}:"
	done

	export PATH+="${D}/usr/bin:${os_path}";

	# *.so: Apache2 modules, OCaml stublibs, Ruby modules
	# *.oct: Octave modules
	# *.cmxs: OCaml natdynlink modules: http://gallium.inria.fr/~frisch/ndl.txt
	nativelibs=$(find . -executable \( -name '*.exe' -o -name '*.dll' -o -name '*.so' -o -name '*.oct' -o -name '*.cmxs' \) \
		-exec objdump -p '{}' + | grep "DLL Name:" | sort -u | \
		cut -d ' ' -f 3 | sed -e '/^[A-Z32]*\.[Dd][Ll][Ll]$/d' -e '/^mscoree\.dll$/d' | \
		xargs -r which || true)
	if check_prog monodis
	then
		netlibs=$(for x in $(monodis --assemblyref $(find . -type f -perm 644 \( -name '*.exe' -o -name '*.dll' \) ) 2>/dev/null \
			| sed -e ':a;N;$!ba;s|\n\t| |g;s|\n0x00000000: ||g' | grep 'Public Key:' \
			| sed -e 's|.* Version=\([1-9]\).* Name=\(mscorlib\) .*|usr/lib/mono/\1.0/\2.dll|g' \
			-e 's|.* Version=\([0-9\.]*\) Name=\([^ ]*\).* Public Key:\([0-F ]*\)|usr/lib/mono/gac/\2/\1__\L\3\E/\2.dll|g' -e 's| ||g' \
			| sort -u); do \
			if ! test -f ./$x ; then echo /$x ; fi ; done)
		netimps=$(find . \( -name '*.dll.config' -o -name '*.exe.config' \) \
			| xargs -r grep -h target= | sed -e 's|.*target="*\([^ "]*\).*|\1|g' \
			| sort -u | xargs -r which || true)
	fi
	echo $nativelibs $netlibs $netimps | sort -u | xargs -r cygcheck -f | sort -fu | sed 's!^!  !';
	popd

	PATH="${os_path}"
}

readonly -f __list_files __list_deps __show_info
