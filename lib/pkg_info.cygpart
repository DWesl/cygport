################################################################################
#
# pkg_info.cygpart - cygport package information functions
#
# Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011, 2012 Yaakov Selkowitz
# Provided by the Cygwin Ports project <http://sourceware.org/cygwinports/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

#****v* Information/DESCRIPTION
#  DESCRIPTION
#  A short, one-line description of the package.  This is purely informational.
#****

#****v* Information/HOMEPAGE
#  DESCRIPTION
#  The website URI of the package.  Besides being informational, this defines
#  what address will be displayed in BROWSER by the homepage command.
#****

__show_info() {
	cat <<-_EOF
	Cygport package information
	    Package name:     ${PN}
	    Package version:  ${PV}
	    Cygwin release:   ${PR}
	    Homepage:         ${HOMEPAGE}
	    Description:      ${DESCRIPTION}
		_EOF
}

__list_files() {
	pushd ${D}
	find * -path 'usr/*/debug' -prune -o ! -type d -print | sed 's!^!  /!' | sort
	popd
}

__list_debug_files() {
	pushd ${D}
	find usr/*/debug ! -type d 2>/dev/null | sed 's!^!  /!' | sort
	popd
}

__list_deps() {
	local locs="${@}"
	local d f ext
	local alldeps pcdep pldep pldirs pydep pydirs pyexts rbdep rbdirs
	local tcgcclibdir tcgccsysroot
	local os_path="${PATH}"

	if __host_is_embedded
	then
		return
	fi

	pushd ${D}

#****v* Information/DEPS_PATH
#  DESCRIPTION
#  A colon-separated list of directories not ordinarily in PATH in which to
#  search for linked dependencies.  Given directories are searched both
#  on the system and under $D.
#****

	# This prevents a package from listing itself as a dependency if
	# already installed
	unset PATH

	for d in ${DEPS_PATH//:/ }
	do
		PATH+="${D}${d}:${d}:"
		if inherited cross
		then
			PATH+="${D}${CROSS_SYSROOT}${d}:${CROSS_SYSROOT}${d}:"
		fi
	done

	export PATH+="${D}$(__host_prefix)/bin:${os_path}";

	if __cross_compiling && ! __target_is_embedded && check_target_tool gcc
	then
		tcgcclibdir=$(dirname $(${CTARGET}-gcc --print-file-name=libgcc.a))
		tcgccsysroot=$(${CTARGET}-gcc -print-sysroot)
		PATH+=":${D}${tcgcclibdir#${D}}:${tcgcclibdir#${D}}"

		# FIXME: thoroughout this section, CTARGET to get libgcc et. al. deps,
		#        or CHOST to get canadian-cross deps
		case ${CTARGET} in
		${CBUILD%%-*}-*-mingw*|${CBUILD%%-*}-*-msys*)
			PATH+=":${D}/usr/${CTARGET}/sys-root/$(__target_prefix)/bin:${tcgccsysroot}$(__target_prefix)/bin"
			# native binutils handles both cygwin and mingw binaries
			;;
		*-*-cygwin*|*-*-mingw*|*-*-msys*)
			PATH+=":${D}/usr/${CTARGET}/sys-root/$(__target_prefix)/bin:${tcgccsysroot}$(__target_prefix)/bin"
			alldeps+=" "$(find ${locs} -type f -executable \( -name '*.exe' -o -name '*.dll' -o -name '*.so' -o -name '*.oct' -o -name '*.cmxs' \) \
				-exec ${CTARGET}-objdump -p '{}' + 2>/dev/null | grep "DLL Name:" | sort -u | \
				cut -d ' ' -f 3 | xargs -r which || true)
			;;
		*-*-darwin*)
			PATH+=":${D}/usr/${CTARGET}/sys-root/$(__target_prefix)/lib:${tcgccsysroot}$(__target_prefix)/lib"
			alldeps+=" "$(find ${locs} -type f -executable -exec ${CTARGET}-otool -L '{}' + 2>/dev/null | \
				sed -e '1d;s|^\t\([^ ]*\).*|\1|g' | sort -u | xargs -r which || true )
			;;
		# FIXME: any other non-ELF systems?
		*)	# ELF system; libc in /lib, other libs in /usr/lib
			PATH+=":${D}/usr/${CTARGET}/sys-root/lib:${tcgccsysroot}/lib"
			PATH+=":${D}/usr/${CTARGET}/sys-root/$(__target_prefix)/lib:${tcgccsysroot}$(__target_prefix)/lib"
			alldeps+=" "$(find ${locs} -type f -executable -exec ${CTARGET}-objdump -p '{}' + 2>/dev/null | \
				sed -n -e 's| *NEEDED *\([^ ]*\).*|\1|gp' | \
				sort -u | xargs -r which || true )
			;;
		esac
	fi

	# *.so: Apache2 modules, OCaml stublibs, Ruby modules
	# *.oct: Octave modules
	# *.cmxs: OCaml natdynlink modules: http://gallium.inria.fr/~frisch/ndl.txt
	alldeps+=" "$(find ${locs} -type f -executable \( -name '*.exe' -o -name '*.dll' -o -name '*.so' -o -name '*.oct' -o -name '*.cmxs' \) \
		-exec ${OBJDUMP} -p '{}' + 2>/dev/null | grep "DLL Name:" | sort -u | \
		cut -d ' ' -f 3 | xargs -r which || true)

	# implib devel->dll subpackage dependencies
	alldeps+=" "$(find ${locs} -type f -name '*.dll.a' -exec dlltool -I '{}' \; 2>/dev/null \
			| sort -u | xargs -r which)

	# pkg-config dependencies on other devel packages
	for pcdep in $(find ${locs} -type f -name '*.pc' | xargs -r grep ^Requires | cut -d' ' -f2-)
	do
		# avoid version comparison tokens
		case ${pcdep} in [A-Za-z]*) ;; *) continue ;; esac
		for d in $(__target_prefix)/lib/pkgconfig /usr/share/pkgconfig
		do
			if [ -f ${d}/${pcdep}.pc ]
			then
				alldeps+=" "${d}/${pcdep}.pc;
				break;
			fi
		done
	done

	if check_prog monodis
	then
		alldeps+=" "$(for x in $(monodis --assemblyref $(find ${locs} -type f -perm 644 \( -name '*.exe' -o -name '*.dll' \) ) 2>/dev/null \
			| sed -e ':a;N;$!ba;s|\n\t| |g;s|\n0x00000000: ||g' | grep 'Public Key:' \
			| sed -e 's|.* Version=\([1-9]\).* Name=\(mscorlib\) .*|usr/lib/mono/\1.0/\2.dll|g' \
			-e 's|.* Version=\([0-9\.]*\) Name=\([^ ]*\).* Public Key:\([0-F ]*\)|usr/lib/mono/gac/\2/\1__\L\3\E/\2.dll|g' -e 's| ||g' \
			| sort -u); do \
			if ! test -f ./$x ; then echo /$x ; fi ; done)
		alldeps+=" "$(find ${locs} \( -name '*.dll.config' -o -name '*.exe.config' \) \
			| xargs -r sed -n -e 's|.*target="*\([^ "]*\.dll\).*|\1|gp' \
			| sort -u | xargs -r which || true)
	fi

	if check_prog perl
	then
		pldirs=$(PERL5LIB=${D}${PERL_VENDORLIB} perl -e 'print join(" ",@INC)')
		for pldep in $(echo $(find ${locs} -name '*.pl' -o -name '*.pm') \
				$(find ${locs} ! -type d ! -name '*.*' -executable | xargs grep -l '^#!.*perl.*') \
				| xargs -r sed -ne 's/^ *\(use\|require\) \([A-Z][^ ;]*\).*/\2/gp' \
				| sort -u)
		do
			for d in ${pldirs}
			do
				if [ -f ${d}/${pldep//:://}.pm ]
				then
					alldeps+=" "${d}/${pldep//:://}.pm;
					break;
				fi
			done
		done
	fi

	if check_prog python && ! inherited python3
	then
		pydirs=$(PYTHONPATH=${D}${PYTHON_SITELIB} python -c 'import sys; print(" ".join(sys.path))')
		pyexts=$(python -c 'import imp
for suffix, mode, type in imp.get_suffixes(): print(suffix)')
		for pydep in $(echo $(find ${locs} -name '*.py') \
				$(find ${locs} ! -type d ! -name '*.*' -executable | xargs grep -l '^#!.*python[^3]*') \
				| xargs -r grep -h '^[^#]*import ' \
				| sed -e 's/ *from \([^ ]*\) import .*/\1/g;s/ *import //g;s/,.*//g;s/ as .*//g;' \
				| sort -u)
		do
			for d in ${pydirs}
			do
				for ext in ${pyexts} /__init__.py /__init__.pyc
				do
					if [ -f ${d}/${pydep//\.//}${ext} ]
					then
						alldeps+=" "${d}/${pydep//\.//}${ext};
						break 2;
					fi
				done
			done
		done
	elif check_prog python3
	then
		pydirs=$(PYTHONPATH=${D}${PYTHON3_SITELIB} python3 -c 'import sys; print(" ".join(sys.path))')
		pyexts=$(python3 -c 'import imp
for suffix, mode, type in imp.get_suffixes(): print(suffix)')
		for pydep in $(echo $(find ${locs} -name '*.py') \
				$(find ${locs} ! -type d ! -name '*.*' -executable | xargs grep -l '^#!.*python3') \
				| xargs -r grep -h '^[^#]*import ' \
				| sed -e 's/ *from \([^ ]*\) import .*/\1/g;s/ *import //g;s/,.*//g;s/ as .*//g;' \
				| sort -u)
		do
			for d in ${pydirs}
			do
				for ext in ${pyexts} /__init__.py /__pycache__/__init__.pyc /__init__.pyc
				do
					if [ -f ${d}/${pydep//\.//}${ext} ]
					then
						alldeps+=" "${d}/${pydep//\.//}${ext};
						break 2;
					fi
				done
			done
		done
	fi

	if check_prog ruby
	then
		rbdirs=$(RUBYLIB=${D}${RUBY_VENDORLIB}:${D}${RUBY_VENDORARCH}:${D}${RUBY_SITELIB}:${D}${RUBY_SITEARCH} ruby -e 'print($:.join(" "))')
		for rbdep in $(echo $(find ${locs} -name '*.rb') \
				$(find ${locs} ! -type d ! -name '*.*' -executable | xargs grep -l '^#!.*ruby') \
				| xargs -r sed -ne "s|^[^#]*require ['\"]\([^'\"]*\)['\"].*|\1|gp" \
				| sort -u)
		do
			for d in ${rbdirs}
			do
				for f in ${rbdep}.rb ${rbdep}.so ${rbdep}
				do
					if [ -f ${d}/${f} ]
					then
						alldeps+=" "${d}/${f};
						break 2;
					fi
				done
			done
		done
	fi

	if [ "${CBUILD}" = "i686-pc-cygwin" ]
	then
	    echo $alldeps | sort -u | xargs -r cygcheck -f;
	else
	    # cannot determine Cygwin package dependencies, but we can give
	    # some guidance by listing the necessary libraries
	    echo $alldeps | sort -fu;
	fi

	popd

	PATH="${os_path}"
}

__show_deps() {
	__list_deps | sort -fu | sed "/^${PF}$/d;s/^/  /g"
}

__show_web() {
	local mybrowser mywww

	if defined HOMEPAGE
	then
		mywww=${HOMEPAGE}
	else
		warning "HOMEPAGE undefined, searching Google for ${ORIG_PN:-${PN}}"
		mywww="http://www.google.com/search?q=${ORIG_PN:-${PN}}"
	fi

	for prog in "${BROWSER}" xdg-open cygstart false
	do
		if check_prog ${prog%% *}
		then
			mybrowser=${prog};
			break;
		fi
	done

	${mybrowser} ${mywww} &>/dev/null &
}

readonly -f __list_files __list_debug_files __list_deps \
	    __show_deps __show_info __show_web
