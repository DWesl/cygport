################################################################################
#
# ruby.cygclass - functions for building Ruby modules
#
# Part of cygport - Cygwin packaging application
# Copyright (C) 2006, 2007, 2008 Yaakov Selkowitz
# Provided by the Cygwin Ports project <http://sourceware.org/cygwinports/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$
#
################################################################################

check_prog_req ruby

RUBY=/usr/bin/ruby
RUBY_VERSION=$(${RUBY} -r rbconfig -e 'print Config::CONFIG["ruby_version"]')
RUBY_LIB=$(${RUBY} -r rbconfig -e 'print Config::CONFIG["rubylibdir"]')
RUBY_ARCH=$(${RUBY} -r rbconfig -e 'print Config::CONFIG["archdir"]')
RUBY_SITELIB=$(${RUBY} -r rbconfig -e 'print Config::CONFIG["sitelibdir"]')
RUBY_SITEARCH=$(${RUBY} -r rbconfig -e 'print Config::CONFIG["sitearchdir"]')
RI_SITEDIR=/usr/share/ri/${RUBY_VERSION}/site
LIBRUBY=$(${RUBY} -r rbconfig -e 'print Config::CONFIG["LIBRUBYARG"]')

ruby_compile() {
	if [ -e install.rb ]
	then
		${RUBY} install.rb config --prefix=/usr ${@} || error "install.rb config failed"
		${RUBY} install.rb setup || error "install.rb setup failed"
	elif [ -e setup.rb ]
	then
		${RUBY} setup.rb config --prefix=/usr ${@} || error "setup.rb config failed"
		${RUBY} setup.rb setup || error "setup.rb setup failed"
	elif [ -e extconf.rb ]
	then
		${RUBY} extconf.rb ${@} || error "extconf.rb failed"
		cygmake
	elif [ -e Rakefile -o -e rakefile ]
	then
		check_prog_req rake
		rake ${@} || error "rake failed"
	else
		error "No Ruby module detected"
	fi

	if defined RDOC_SOURCE
	then
		rdoc -U --ri --op ${B}/.rdoc ${RDOC_SOURCE}
	fi
}

ruby_install() {
	if [ -f Makefile ]
	then
		cyginstall ${@}
	elif [ -e install.rb ]
	then
		${RUBY} install.rb config --prefix=${D}/usr ${@} || error "install.rb config failed"
		${RUBY} install.rb install || error "install.rb install failed"
	elif [ -e setup.rb ]
	then
		${RUBY} setup.rb config --prefix=/usr ${@} || error "setup.rb config failed"
		${RUBY} setup.rb install --prefix=${D} || error "setup.rb install failed"
	elif [ -e Rakefile -o -e rakefile ]
	then
		check_prog_req rake
		rake install DESTDIR=${D} ${@} || error "rake install failed"
	else
		error "No Ruby module detected"
	fi

	if [ -d .rdoc ]
	then
		dodir ${RI_SITEDIR}

		pushd .rdoc
		for mod in ${RDOC_MODULE:-*/}
		do
			if [ ! -d ${mod} ]
			then
				warning "RI module ${mod} was not generated"
				continue
			fi

			cp -r ${mod} ${D}${RI_SITEDIR}/
		done
		popd
	fi
}

rubyinto() {
	if (( $# != 1 ))
	then
	    error "rubyinto accepts exactly one argument";
	fi

	case ${1} in
    	/*) error "rubyinto argument should be only a subdirectory" ;;
	esac

	export _rubyinto_dir=${1};
}

doruby() {
	local rbdir
	local sodir
	local i

	if defined _rubyinto_dir
	then
		rbdir=${RUBY_SITELIB}/${_rubyinto_dir}
		sodir=${RUBY_SITEARCH}/${_rubyinto_dir}
	else
		rbdir=${RUBY_SITELIB}
		sodir=${RUBY_SITEARCH}
	fi

	dodir ${rbdir} ${sodir}

	for i
	do
		if [ -e ${i} ]
		then
			case ${i} in
				*.la)
					/usr/bin/libtool --mode=install /usr/bin/install ${i} ${D}${sodir} || error "doruby ${i} failed"
					;;
				*.so)
					/usr/bin/install -m0755 ${i} ${D}${sodir} || error "doruby ${i} failed"
					;;
				*.a|*.h)
					/usr/bin/install -m0644 ${i} ${D}${sodir} || error "doruby ${i} failed"
					;;
				*)
					/usr/bin/install -m0644 ${i} ${D}${rbdir} || error "doruby ${i} failed"
					;;
			esac
		else
			error "doruby: ${i}: file not found"
		fi
	done
}

src_compile() {
	lndirs
	cd ${B}
	ruby_compile
}

src_install() {
	cd ${B}
	ruby_install
}

readonly -f ruby_compile ruby_install rubyinto doruby
