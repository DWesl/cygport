################################################################################
#
# pkg_upload.cygpart - cygport package uploading functions
#
# Copyright (C) 2014 Andrew Schulman
# Provided by the Cygwin Ports project <http://sourceware.org/cygwinports/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

__pkg_upload() {
	local archdir
	local dir
	local file
	local -a pkg_files
	local pn

	cd "${distdir}"

	# Check that binary and source package files exist
	for pn in ${pkg_name[*]}
	do
		if [ "$pn" = "$NAME" ]
		then
			pkg_files=("${NAME}/${pn}-${PVR}.tar.xz" "${NAME}/${pn}-${PVR}-src.tar.xz")
		else
			pkg_files=("${NAME}/${pn}/${pn}-${PVR}.tar.xz")
		fi

		for file in "${pkg_files[@]}"
		do
			if [ ! -f "${file}" ]
			then
				error "Package file ${file} doesn't exist. Run \"cygport ${cygportfile} pkg\" to build it."
			fi
		done
	done

	# Upload

	case ${ARCH} in
		i686)	archdir=(x86) ;;
		x86_64)	archdir=(x86_64) ;;
		noarch) archdir=(x86 x86_64) ;;
		*)  error "Don't know where to upload packages with architecture ${ARCH}" ;;
	esac

	__step "Running lftp sftp://cygwin:@cygwin.com"

	{
		echo "set cmd:fail-exit on"
		echo "set cmd:interactive on"
		echo "set net:max-retries 1"

		if test -n "$SSH_KEY"
		then
			echo "set sftp:connect-program ssh -a -x -i '${SSH_KEY}'"
		fi

		echo "open sftp://cygwin:@cygwin.com"

		for dir in ${archdir[*]}
		do
			echo "cd /${dir}/release"
			echo "rm -f !ready || echo -n"
			echo "mirror -v -eR ${NAME}"
			echo "put /dev/null -o !ready"
		done

	} | lftp -f/dev/stdin || error "Upload failed"

	echo "Upload complete."
}

# protect functions
readonly -f __pkg_upload
