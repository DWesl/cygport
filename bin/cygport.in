#!/bin/bash
################################################################################
#
# cygport - Cygwin packaging application
#
# Copyright (C) 2006, 2007, 2008, 2009 Yaakov Selkowitz
# Provided by the Cygwin Ports project <http://sourceware.org/cygwinports/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$
#
################################################################################
set -e;


################################################################################
#
# Initialization
#
################################################################################

# Make sure we are on 1.7 before proceeding
case $(uname -r) in
	1.7.*)	;;
	1.5.*)	echo -e " \e[1;31m*\e[0;0m cygport 0.4.x is required for Cygwin 1.5."; exit 127 ;;
	*)		echo -e " \e[1;31m*\e[0;0m cygport: Unknown cygwin version: $(uname -r)"; exit 127 ;;
esac

declare -r  _version=@VERSION@;

# we can't use defined yet, as these must be declared first
if [ "xCYGPORT_BOOTSTRAP" != "x" ] && [ "x$top_srcdir" != "x" ]
then
	case ${top_srcdir} in
		.*) declare -rx _prefix=$(pwd)/${top_srcdir} ;;
		/*) declare -rx _prefix=${top_srcdir} ;;
    esac

	declare -r  _privlibdir=${_prefix}/lib;
	declare -r  _privdatadir=${_prefix}/data;
	declare -rx _privclassdir=${_prefix}/cygclass;
	declare -r  _privdocdir=${_prefix};
	declare -r  _sysconfdir=${_prefix}/data;
else
	declare -rx _prefix=@pkglibdir@;
	declare -r  _privlibdir=${_prefix};
	declare -r  _privdatadir=@pkgdatadir@;
	declare -rx _privclassdir=${_privdatadir}/cygclass;
	declare -r  _privdocdir=@docdir@;
	declare -r  _sysconfdir=@sysconfdir@;
fi

declare -ar argv=(${0} ${@})
declare -ir argc=$(( $# + 1 ))


### import defined, pushd, popd
source ${_privlibdir}/syntax.cygpart
###


################################################################################
#
# Command-line Help
#
################################################################################

### import _show_help, _show_version
source ${_privlibdir}/help.cygpart
###

# Accept --help and --version arguments without specifying a cygport file
case ${argv[1]} in
	--help|-h|-\?)
		__show_help;
		exit 0;
		;;
	--version|-v)
		__show_version;
		exit 0;
		;;
	-*)
		echo "${argv[0]}: unknown argument ${argv[1]}";
		__show_help;
		exit 1;
		;;
esac

# Show help if no commands are given
if ! defined argv[1] || ! defined argv[2]
then
	__show_help;
	exit 1;
fi


################################################################################
#
# System checks
#
################################################################################

### import check_prog and friends
source ${_privlibdir}/check_funcs.cygpart
###

# check now for all mandatory programs
for _myprog in bzip2 cat chmod cp cygcheck diff diffstat find grep gzip install \
               ln mkdir mv objdump patch rm rsync sed sort strip tar xargs
do
	if ! check_prog ${_myprog}
	then
		error "${_myprog} is required to run cygport";
	fi
done

unset _myprog;


################################################################################
#
# Function definitions
#
################################################################################

### __config_get/set and friends
source ${_privlibdir}/config_registry.cygpart
###

### inherit and friends
source ${_privlibdir}/inheritance.cygpart
###

### fetch and friends
source ${_privlibdir}/src_fetch.cygpart
###

### mirrors list
source ${_privdatadir}/mirrors
###

### unpack, cygpatch, __src_prep and friends
source ${_privlibdir}/src_prep.cygpart
###

### lndirs, cygmake
source ${_privlibdir}/src_compile.cygpart
###

### cygtest and friends
source ${_privlibdir}/src_test.cygpart
###

### cyginstall, do*, new*, *into, and friends
source ${_privlibdir}/src_install.cygpart
###

### __src_postinst and friends
source ${_privlibdir}/src_postinst.cygpart
###

### __list_files, __list_deps, __show_info
source ${_privlibdir}/pkg_info.cygpart
###

### __pkg_* functions
source ${_privlibdir}/pkg_pkg.cygpart
###

### __finish
source ${_privlibdir}/pkg_cleanup.cygpart
###

# Auto-inherit autotools for backwards compatibility. But we
# want to allow it to be inherited one more time in order to
# reset src_compile() when other cygclasses override it.
inherit autotools;
unset _autotools_CYGCLASS_


################################################################################
#
# Import user settings
#
################################################################################

# Values which can be overridden either system-wide or per package
declare -x CC="gcc";
declare -x CFLAGS="-O2 -pipe ";
declare -x CPPFLAGS="";
declare -x CXX="g++";
declare -x CXXFLAGS="${CFLAGS}";
declare -x F77="g77";
declare -x FFLAGS="${CFLAGS}";
declare -x GCJ="gcj";
declare -x GCJFLAGS="${CFLAGS}";
declare -x LDFLAGS="";
declare -x LIBS="";
declare    MAKEOPTS="-j$(($(grep -c '^proc' /proc/cpuinfo) + 1)) ";
declare    CHOST="$(uname -m)-pc-cygwin";

# load configuration
for conf in ${_sysconfdir}/cygport.conf \
			"${HOME}/.cygportrc" \
			"${HOME}/.cygport.conf" \
			"${HOME}/.cygport/cygport.conf"
do
	if [ -e "${conf}" ]
	then
		source "${conf}" || error "could not read ${conf}"
	fi
done

unset conf;


################################################################################
#
# Import the .cygport file
#
################################################################################

# argv[1] may or may not include the .cygport extension
             PF=${argv[1]##*/}
declare -r   PF=${PF%.cygport}
# these must be defined now to be available in SRC_URI
declare -rx  PN=$(echo ${PF} | sed -e 's/\-[^\-]*\-[^\-]*$//');
             PV=$(echo ${PF} | sed -e "s/${PN}\-//" -e 's/\-[^\-]*$//');
declare -rx  PR=${PF#${PN}-${PV}-};
declare -rx  P=${PN}-${PV};
declare -rx  PVR=${PV}-${PR};
declare -arx PVP=(${PV//[-\._]/ });
declare -rx  PV=(${PV} ${PVP[*]});
declare -rx  PV_MAJ=${PV[1]};
declare -rx  PV_MAJ_MIN="${PV[1]}.${PV[2]}";

declare -r   cygportfile=${PF}.cygport;

_topdir=${argv[1]%/*};

if [ "x${_topdir}" = "x${argv[1]}" ]
then
	if [ -f /usr/src/${cygportfile} ]
	then
		_topdir=/usr/src;
	else
		_topdir=.;
	fi
fi

declare -r top=$(cd ${_topdir}; pwd);
unset _topdir;

if [ ! -e ${top}/${cygportfile} ]
then
	error "${cygportfile} not found.";
fi

### load .cygport
source ${top}/${cygportfile} || error "could not read ${cygportfile}"
###

if defined CYGPORT_DEPEND
then
	if ! __version_at_least ${CYGPORT_DEPEND} ${_version}
	then
		error "This package requires cygport ${CYGPORT_DEPEND} or newer";
	fi
fi

for restrict in ${RESTRICT}
do
	export _CYGPORT_RESTRICT_${restrict//-/_}_=1
done


################################################################################
#
# Define package-dependant variables
#
################################################################################

declare -r workdir="${top}/${PF}";
declare -r srcdir="${workdir}/src";
declare -r origsrcdir="${workdir}/origsrc";
declare -r configdir="${workdir}/config";
declare -r logdir="${workdir}/log";
declare -r patchdir="${workdir}/patch";
declare -r spkgdir="${workdir}/spkg";
declare -r distdir="${workdir}/dist";

SRC_DIR=${SRC_DIR:-${ORIG_PN:-${PN}}-${PV}};
if [ "x${SRC_DIR}" = "x." ]
then
	declare -r S=${srcdir};
else
	declare -r S=${srcdir}/${SRC_DIR};
fi

declare -rx B="${workdir}/build";
declare -rx D="${workdir}/inst";
declare -rx T="${workdir}/temp";
declare -rx C="${S}/CYGWIN-PATCHES";

declare -r compilelog="${logdir}/${PF}-compile.log";
declare -r checklog="${logdir}/${PF}-check.log";
declare -r installlog="${logdir}/${PF}-install.log";
declare -r pkglog="${logdir}/${PF}-pkg.log";

if ! defined SRC_URI
then
	error "SRC_URI must be defined";
fi

for _src_uri in ${SRC_URI}
do
	_src_uri="${_src_uri%\?*}"
	_src_orig_pkgs+=" ${_src_uri##*/}";
done
readonly _src_orig_pkgs;
unset _src_uri;

for _patch_uri in ${PATCH_URI}
do
	_patch_uri="${_patch_uri%\?*}"
	_src_orig_patches+=" ${_patch_uri##*/}";
done
readonly _src_orig_patches;
unset _patch_uri;

declare -r cygwin_patchfile=${PF}.cygwin.patch;
declare -r src_patchfile=${PF}.src.patch;

declare -ar pkg_name=(${PKG_NAMES:-${PN}});
declare -r  pkg_count=${#pkg_name[*]};

if [ "x${pkg_name[0]}" != "x${PN}" ]
then
	error "When defining PKG_NAMES, the first package should be ${PN}.";
fi

################################################################################
#
# Command processing
#
################################################################################

declare -i arg_n=2

while (( arg_n < argc ))
do
	case ${argv[${arg_n}]} in
		download|fetch|wget|get)
			__src_fetch;
			_status=$?;
			;;
		prep|unpack)
			__stage Preparing;
			__src_prep;
			_status=$?;
			;;
		compile|build|make)
			__stage Compiling;
			src_compile 2>&1 | tee ${compilelog};
			_status=$?;
			;;
		check|test)
			__stage Testing;
			src_test 2>&1 | tee ${checklog};
			_status=$?;
			;;
		inst*)
			__stage Installing;
			(__prepinstalldirs && src_install && __src_postinst) 2>&1 | tee ${installlog};
			_status=$?;
			;;
		postinst*)
			__src_postinst;
			_status=$?;
			;;
		list)
			__list_files;
			_status=$?;
			;;
		dep*)
			__list_deps;
			_status=$?;
			;;
		info*)
			__show_info;
			_status=$?;
			;;
		package|pkg)
			__stage Packaging;
			(__pkg_binpkg && __pkg_pkgcheck && __pkg_srcpkg && __pkg_dist) 2>&1 | tee ${pkglog};
			_status=$?;
			;;
		diff|mkdiff|mkpatch)
			__pkg_diff;
			_status=$?;
			;;
		finish)
			__finish;
			_status=$?;
			;;
		almostall)
			__stage Preparing && __src_prep && \
			__stage Compiling && src_compile 2>&1 | tee ${compilelog} && \
			__stage Installing && (__prepinstalldirs && src_install && __src_postinst) 2>&1 | tee ${installlog} && \
			__stage Packaging && (__pkg_binpkg && __pkg_pkgcheck && __pkg_srcpkg && __pkg_dist) 2>&1 | tee ${pkglog}
			_status=$?;
			;;
		all)
			__stage Preparing && __src_prep && \
			__stage Compiling && src_compile 2>&1 | tee ${compilelog} && \
			__stage Installing && (__prepinstalldirs && src_install && __src_postinst) 2>&1 | tee ${installlog} && \
			__stage Packaging && (__pkg_binpkg && __pkg_pkgcheck && __pkg_srcpkg && __pkg_dist) 2>&1 | tee ${pkglog} && \
			__finish;
			_status=$?;
			;;
		help)
			__show_help;
			exit 0;
			;;
		version)
			__show_version;
			exit 0;
			;;
		_*)
			error "unknown command ${argv[${arg_n}]}";
			exit 1;
			;;
		*)
			if __check_function ${argv[${arg_n}]} && ! __check_function_ro ${argv[${arg_n}]}
			then
				${argv[${arg_n}]};
			else
				error "unknown command ${argv[${arg_n}]}";
			fi
			_status=$?;
			;;
	esac

	if (( _status != 0 ))
	then
		break;
	fi

	arg_n+=1;
done

exit ${_status};
