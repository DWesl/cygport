################################################################################
#
# wxwidgets.cygclass - functions for building wxWidgets-dependent packages
#
# Part of cygport - Cygwin packaging application
# Copyright (C) 2007, 2008, 2009, 2010 Yaakov Selkowitz
# Provided by the Cygwin Ports project <http://sourceware.org/cygwinports/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

#****h* Cygclasses/wxwidgets.cygclass
#  SYNOPSIS
#  WX_VERSION="X.Y"
#  [WX_CODESET="..."]
#  [WX_TOOLKIT="..."]
#  inherit wxwidgets
#  DESCRIPTION
#  The wxWidgets toolkit is a cross-platform, C++ GUI toolkit which is built
#  on top of other GUI toolkits for a native look on all platforms.  Each
#  combination of major.minor version, backend toolkit, and choice of ANSI or
#  Unicode text codesets are parallel-installable.  Packages which depend on
#  the wxWidgets toolkit will only build against one or two versions at any
#  given time, and may require a particular codeset or toolkit.
#
#  This cygclass selects the wx-config script for the desired version, backend
#  tookit, and codeset of the wxWidgets toolkit.
#****

#****v* wxwidgets.cygclass/WX_VERSION
#  DESCRIPTION
#  The desired major.minor branch of the wxWidgets toolkit.  This variable must
#  be set before inherit()ing the wxwidgets.cygclass.
#  NOTE
#  Even minor version numbers represent stable branches; versions 2.6 and 2.8
#  are supported.  Unstable branches (with odd minor versions) are currently
#  not supported.
#****
#****v* wxwidgets.cygclass/WX_TOOLKIT
#  DESCRIPTION
#  The desired backend toolkit version of the wxWidgets toolkit.  Possible values
#  are "gtk2", "gtk", "motif", or "x11univ".
#
#  This variable must be set before inherit()ing the wxwidgets.cygclass.
#  If undefined, "gtk2" is used as the default.
#****
#****v* wxwidgets.cygclass/WX_CODESET
#  DESCRIPTION
#  The choice of text codeset of the wxWidgets toolkit.  Possible values are
#  "ansi" and "unicode", but only the "gtk2" WX_TOOLKIT supports "unicode".
#
#  This variable must be set before inherit()ing the wxwidgets.cygclass.
#  If undefined, "unicode" is the default if WX_TOOLKIT is "gtk2".
#****

_wx_find_config() {
	local wx_config
	local wx_base

	WX_TOOLKIT=${WX_TOOLKIT:-gtk2}

	case ${WX_TOOLKIT} in
		base)
			WX_TOOLKIT=gtk2
			wx_base="base"
			;;
		gtk2u)
			WX_TOOLKIT=${WX_TOOLKIT%u}
			WX_CODESET=unicode
			;;
		x11) WX_TOOLKIT=x11univ ;;
	esac

	if ! defined WX_CODESET
	then
		case ${WX_TOOLKIT} in
			gtk2)	WX_CODESET="unicode" ;;
			*)		WX_CODESET="ansi" ;;
		esac
	fi

	case ${WX_CODESET} in
		unicode)
			case ${WX_TOOLKIT} in
				gtk2) ;;
				gtk|motif|x11univ)
					error "wxWidgets ${WX_TOOLKIT} is only available in ANSI"
					;;
				*)	error "Unknown or unsupported wxWidgets toolkit"
					;;
			esac
			;;
		ansi)
			case ${WX_TOOLKIT} in
				gtk|gtk2|motif|x11univ) ;;
				*)	error "Unknown or unsupported wxWidgets toolkit"
			esac
			;;
		*)	error "Unknown value for WX_CODESET; must be 'ansi' or 'unicode'"
			;;
		esac

	case ${WX_VERSION} in
		2.6|2.8) wx_config=/usr/lib/wx/config/${WX_TOOLKIT}-${WX_CODESET}-release-${WX_VERSION} ;;
		'') error "WX_VERSION must be defined" ;;
		*) error "wxWidgets ${WX_VERSION} is not yet supported" ;;
	esac

	if [ ! -f ${wx_config} ]
	then
		error "could not find ${wx_config##*/}"
	fi

	echo ${wx_config} ${wx_base}
}

#****d* wxwidgets.cygclass/WX_CONFIG
#  DESCRIPTION
#  Absolute path to the wx-config script for the given WX_VERSION, WX_TOOLKIT, and
#  WX_CODESET.  This definition is exported to the build environment.
#****
export WX_CONFIG="$(_wx_find_config)"

#****d* wxwidgets.cygclass/WX_CFLAGS
#  DESCRIPTION
#  Compile flags for the specified version/toolkit/codeset of wxWidgets.  This
#  is equivalent to `$WX_CONFIG --cflags`.
#****
WX_CFLAGS="$(${WX_CONFIG} --cflags)"

#****d* wxwidgets.cygclass/WX_LIBS
#  DESCRIPTION
#  Link flags for the specified version/toolkit/codeset of wxWidgets.  This
#  is equivalent to `$WX_CONFIG --libs`.
#  NOTE
#  This will contain the standard, non-"contrib" link libraries shipped with
#  wxWidgets.  If you need to link against one of the "contrib" libraries, you
#  need to call `$WX_CONFIG --libs library1,library2,...`.  In this form,
#  WX_CONFIG will automatically add 'base', but not 'core', which almost all
#  wxWidgets GUI applications will need.  Third-party link library flags cannot
#  be determined by WX_CONFIG and will need to be added manually.
#****
WX_LIBS="$(${WX_CONFIG} --libs)"

#****f* wxwidgets.cygclass/wx-config
#  DESCRIPTION
#  Wrapper function for calling WX_CONFIG.  This function is exported to the
#  build environment.
#****
wx-config() {
	${WX_CONFIG} ${@}
}

export -f wx-config
readonly -f _wx_find_config wx-config
