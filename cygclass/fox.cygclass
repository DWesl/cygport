################################################################################
#
# fox.cygclass - functions for building FOX-toolkit-dependent packages
#
# Part of cygport - Cygwin packaging application
# Copyright (C) 2008, 2009 Yaakov Selkowitz
# Provided by the Cygwin Ports project <http://sourceware.org/cygwinports/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$
#
################################################################################

#****h* Cygclasses/fox.cygclass
#  NAME
#    fox.cygclass -- Build packages dependent on the FOX GUI toolkit
#  SYNOPSIS
#    FOX_VERSION="X.Y"
#    inherit fox
#  DESCRIPTION
#    The FOX toolkit is a cross-platform, C++ GUI toolkit.  The API changes with
#    each major.minor version, each of which is parallel-installable.  Packages
#    which depend on the FOX toolkit will only build against one or two branches
#    at any given time.
#
#    This cygclass selects the fox-config script for the desired version of the
#    FOX toolkit.
#  REQUIRES
#    libFOX1.*-devel
#****

#****v* fox.cygclass/FOX_VERSION
#  DESCRIPTION
#    The desired major.minor branch of the FOX toolkit.  This variable must be
#    set before inherit()ing the fox.cygclass.
#  NOTE
#    Even minor version numbers represent stable branches; versions 1.2, 1.4,
#    and 1.6 are supported.  Unstable branches (with odd minor versions) are
#    currently not supported.
#****

_fox_find_config() {
	local fox_config

	case ${FOX_VERSION} in
		1.[246]) fox_config=/usr/bin/fox-config-${FOX_VERSION} ;;
		'')	error "FOX_VERSION must be defined" ;;
		*) error "FOX ${FOX_VERSION} is not yet supported" ;;
	esac

	if [ ! -f ${fox_config} ]
	then
		error "libFOX${FOX_VERSION}-devel is not installed"
	fi
}

#****d* fox.cygclass/FOX_CONFIG
#  DESCRIPTION
#    Full path to the fox-config script for the given FOX_VERSION.  This definition
#    is exported to the build environment.
#****
export FOX_CONFIG="$(_fox_find_config)"

#****f* fox.cygclass/fox-config
#  DESCRIPTION
#    Wrapper function for calling FOX_CONFIG.  This function is exported to the
#    build environment.
#****
fox-config() {
	${FOX_CONFIG} ${@}
}

export -f fox-config
readonly -f _fox_find_config fox-config
